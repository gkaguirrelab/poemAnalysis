%% poemAnalysis_main
% Analysis code for the Penn Online Evaluation of Migraine (POEM), version
% 3
%
% Description:
%   This routine loads the .csv files generated by Qualtrics that have the
%   results of the migraine diagnostic pathway. The link the data for the
%   Aguirre lab can be found here:
%
%       https://upenn.co1.qualtrics.com/jfe/form/SV_4NQzKbssiT8qqVf
%
%   Subsequent functions called from this main script are responsible for
%   pre-processing of the data fields and then implementing the headache
%   classification pathway.
%

%% Housekeeping
clear variables
close all

% indicates whether to run polychoric light analysis (1) or not (0)
polyChorLight = 1;

%% Set paths to data and output
dataDir = '/Users/carlynpattersongentile/Documents/data/poem/';
analysisDir = '/Users/carlynpattersongentile/Documents/analysis/poem/';

% Set the output filenames
outputResultExcelName = fullfile(dataDir, 'POEM_v3.1_March 3, 2024_20.08.csv');
rawDataSheets = {'POEM_v3.1_March 3, 2024_20.08.csv'};

% get the full path to thisDataSheet
thisDataSheetFileName = fullfile(dataDir, rawDataSheets{1});


%% load and pre-process thisDataSheet, returning table "T"
[T, notesText] = poemAnalysis_preProcess_v3(thisDataSheetFileName);


%% classify headache based upon table T
Dx = poemAnalysis_classify_v3(T);
T.Dx = Dx.Dx;
T.DxSimple = mergecats(Dx.Dx2,{'non-migraine headache','no headache'},'not migraine');
T.DxSimple = reordercats(T.DxSimple,{'not migraine','migraine'});

MSCORES = [T.lightHA T.lightDizzy T.lightEyeStrain T.lightBlurryVision T.lightIntolerant T.lightAnxiety... 
    T.lightFluorescent T.lightFlicker T.lightOutdoorGlare T.lightTrees T.lightSunlight T.lightHeadlight... 
    T.lightScreen T.lightGlassesInd T.lightSeekDark T.lightLimTV T.lightLimDevice...
    T.lightLimShops T.lightLimDrive T.lightLimWork T.lightLimOutdoor];


%% CAMS analysis

var_pres = char('photophobia','phonophobia','osmophobia','nausea and/or vomiting','lightheaded','blurry vision','difficulty thinking',...
    'neck pain','balance problems','spinning','ringing','double vision');
var_abs = char('no photophobia','no phonophobia','no osmophobia','no nausea and/or vomiting','no lightheaded','no blurry vision','no difficulty thinking',...
    'no neck pain','no balance problems','no spinning','no ringing','no double vision');


[cams] = runCAMS(T(:,185:196),var_pres,var_abs,'Sn',[-1 1 1]); % enter the number 4 when prompted

%% Polychoric light analysis

if polyChorLight==1
    MSCORES = [T.lightHA T.lightDizzy T.lightEyeStrain T.lightBlurryVision T.lightIntolerant T.lightAnxiety...
    T.lightFluorescent T.lightFlicker T.lightOutdoorGlare T.lightTrees T.lightSunlight T.lightHeadlight...
    T.lightScreen T.lightGlassesInd T.lightSeekDark T.lightLimTV T.lightLimDevice...
    T.lightLimShops T.lightLimDrive T.lightLimWork T.lightLimOutdoor];

    light_vbls = {'headache','dizzy','eye strain','blurry','intolerant','anxiety',...
    'fluorescent','flicker','glare','trees','sunlight','headlight','screen',...
    'sunglasses indoors','seek darkness','limit TV',...
    'limit devices','limit shops','limit driving','limit work','limit outdoors'};

    Light_polychor = runPolychor(MSCORES,light_vbls);

end

%% compile results

% Demographics
Results = table(categorical(T.ResponseID));
Results.Age = T.Age;
Results.RaceEthnicity = T.RaceEth;
Results.GenderID = T.GenderID;
Results.SAAB = T.SAAB;
Results.SO = T.SO;
Results.HAageOnset = categorical(T.HAageOnset);
Results.MigraineFamHx = categorical(T.MigFamHx);

% Headache diagnosis
Results.DxFull = T.Dx;
Results.DxSimple = T.DxSimple; % separates migraine from not migraine

% Headache burden
Results.MIDAS = T.MIDAS_score;
Results.MigraineFrequency = T.MigraineFrequency; % 1 = 0-4 days/month, 2 = 5-9 d/m, 3 = 10-15 d/m, 4 = 16-20 d/m, 5 = >20 d/m
Results.HAseverity = T.SeverityHA;
Results.ContinuousHA = T.ContinuousHA;

% light, allodynia, and CAMS
Results.LightSensScore = sum([T.lightSx_score T.lightBother_score T.lightAvoidance_score],2) - T.lightGlassesSun;
Results.AllodyniaScore = T.allodynia_score;
Results.interAllodynia = categorical(T.AllodyniaNoHA);
Results.PhoticSneeze = categorical(T.LightSneeze);
Results.PhoticSneeze = renamecats(Results.PhoticSneeze,cell(unique(T.LightSneeze)),{'No','Yes'});
Results.MotionSick = categorical(T.MotionSick);
Results.cams1 = cams.MCA_score(:,1);
Results.cams2 = cams.MCA_score(:,2);
Results.cams3 = cams.MCA_score(:,3);
